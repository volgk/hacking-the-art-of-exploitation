1. Debugging
	(gdb) disass main
	Dump of assembler code for function main:
	   0x000000000000117a <+0>:     push   rbp
	   0x000000000000117b <+1>:     mov    rbp,rsp
	   0x000000000000117e <+4>:     mov    ecx,0x4
	   0x0000000000001183 <+9>:     mov    edx,0x3
	   0x0000000000001188 <+14>:    mov    esi,0x2
	   0x000000000000118d <+19>:    mov    edi,0x1
	   0x0000000000001192 <+24>:    call   0x1135 <test_function>
	   0x0000000000001197 <+29>:    mov    eax,0x0
	   0x000000000000119c <+34>:    pop    rbp
	   0x000000000000119d <+35>:    ret
	 End of assembler dump.

	(gdb) disass test_function
	Dump of assembler code for function test_function:
	   0x0000555555555135 <+0>:     push   rbp
	   0x0000555555555136 <+1>:     mov    rbp,rsp
	   0x0000555555555139 <+4>:     sub    rsp,0x30
	   0x000055555555513d <+8>:     mov    DWORD PTR [rbp-0x24],edi
	   0x0000555555555140 <+11>:    mov    DWORD PTR [rbp-0x28],esi
	   0x0000555555555143 <+14>:    mov    DWORD PTR [rbp-0x2c],edx
	   0x0000555555555146 <+17>:    mov    DWORD PTR [rbp-0x30],ecx
	   0x0000555555555149 <+20>:    mov    rax,QWORD PTR fs:0x28
	   0x0000555555555152 <+29>:    mov    QWORD PTR [rbp-0x8],rax
	   0x0000555555555156 <+33>:    xor    eax,eax
	   0x0000555555555158 <+35>:    mov    DWORD PTR [rbp-0x18],0x7a69
	   0x000055555555515f <+42>:    mov    BYTE PTR [rbp-0x12],0x41
	   0x0000555555555163 <+46>:    nop
	   0x0000555555555164 <+47>:    mov    rax,QWORD PTR [rbp-0x8]
	   0x0000555555555168 <+51>:    xor    rax,QWORD PTR fs:0x28
	   0x0000555555555171 <+60>:    je     0x555555555178 <test_function+67>
	   0x0000555555555173 <+62>:    call   0x555555555030 <__stack_chk_fail@plt>
           0x0000555555555178 <+67>:    leave
           0x0000555555555179 <+68>:    ret	

	   (gdb) disass main
	   Dump of assembler code for function main:
	      0x000055555555517a <+0>:     push   rbp
	      0x000055555555517b <+1>:     mov    rbp,rsp
	      0x000055555555517e <+4>:     mov    ecx,0x4
	      ```````````````````````````````````````````
	      0x0000555555555183 <+9>:     mov    edx,0x3
	      ```````````````````````````````````````````
	      0x0000555555555188 <+14>:    mov    esi,0x2
	      ```````````````````````````````````````````
	      0x000055555555518d <+19>:    mov    edi,0x1
	      ```````````````````````````````````````````
	      0x0000555555555192 <+24>:    call   0x555555555135 <test_function>
	      0x0000555555555197 <+29>:    mov    eax,0x0
	      0x000055555555519c <+34>:    pop    rbp
	      0x000055555555519d <+35>:    ret
	   End of assembler dump.

	   // Marked with ``` are the instructions that put the values on the
	   // stack.  

2. How looks the stack frame

		Top of the Stack
	      ----------------------	
Low addresses|	buffer		    |
	      ----------------------
	     |	flag		    |
	      ----------------------
	     |	Saved frame pointer |
	      ---------------------- <--- Frame pointer (RBP)
	     |	Return address (ret)|
	      ----------------------
	     |	a		    |
	      ----------------------
	     |	b		    |
	      ----------------------
	     |	c		    |
	      ----------------------
	     |	d		    |
	      ----------------------
	     |			    |
High addresses\/\/\/\//\/\/\/\/\/\/\/

3. Continue debugging
	(gdb) list main
	6
	7               flag = 31337;
	8               buffer[0] = 'A';
	9       }
	10
	11      int main() {
	12              test_function(1, 2, 3, 4);
	13      }
	14

	(gdb) break 12
	Breakpoint 1 at 0x55555555517e: file stack_example.c, line 12.

	(gdb) break test_function
	Breakpoint 2 at 0x555555555149: file stack_example.c, line 3.

	(gdb) run
	Starting program: /stack_example/stack_example
	Breakpoint 1, main () at stack_example.c:12
	12              test_function(1, 2, 3, 4);

	(gdb) i r rsp rbp rip
	rsp            0x7fffffffdf90      0x7fffffffdf90
	rbp            0x7fffffffdf90      0x7fffffffdf90
	rip            0x55555555517e      0x55555555517e <main+4>

	(gdb) x/5i $rip
	=> 0x55555555517e <main+4>:     mov    ecx,0x4
	   0x555555555183 <main+9>:     mov    edx,0x3
	   0x555555555188 <main+14>:    mov    esi,0x2
	   0x55555555518d <main+19>:    mov    edi,0x1
	   0x555555555192 <main+24>:    call   0x555555555135 <test_function>

	(gdb) cont
	Continuing.
	Breakpoint 2, test_function (a=1, b=2, c=3, d=4) at stack_example.c:3
	3       void test_function(int a, int b, int c, int d) {

	(gdb) i r rsp rbp rip
	rsp            0x7fffffffdf50      0x7fffffffdf50
	rbp            0x7fffffffdf80      0x7fffffffdf80
	rip            0x555555555149      0x555555555149 <test_function+20>

	(gdb) disass test_function
	Dump of assembler code for function test_function:
	   0x0000555555555135 <+0>:     push   rbp
	   0x0000555555555136 <+1>:     mov    rbp,rsp
	   0x0000555555555139 <+4>:     sub    rsp,0x30
	   0x000055555555513d <+8>:     mov    DWORD PTR [rbp-0x24],edi
	   0x0000555555555140 <+11>:    mov    DWORD PTR [rbp-0x28],esi
	   0x0000555555555143 <+14>:    mov    DWORD PTR [rbp-0x2c],edx
	   0x0000555555555146 <+17>:    mov    DWORD PTR [rbp-0x30],ecx
	=> 0x0000555555555149 <+20>:    mov    rax,QWORD PTR fs:0x28
	   0x0000555555555152 <+29>:    mov    QWORD PTR [rbp-0x8],rax
	   0x0000555555555156 <+33>:    xor    eax,eax
	   0x0000555555555158 <+35>:    mov    DWORD PTR [rbp-0x18],0x7a69
           0x000055555555515f <+42>:    mov    BYTE PTR [rbp-0x12],0x41
           0x0000555555555163 <+46>:    nop
           0x0000555555555164 <+47>:    mov    rax,QWORD PTR [rbp-0x8]
           0x0000555555555168 <+51>:    xor    rax,QWORD PTR fs:0x28
           0x0000555555555171 <+60>:    je     0x555555555178 <test_function+67>
           0x0000555555555173 <+62>:    call   0x555555555030 <__stack_chk_fail@plt>
	   0x0000555555555178 <+67>:    leave
	   0x0000555555555179 <+68>:    ret
	End of assembler dump.

	(gdb) print $rbp-12
	$1 = (void *) 0x7fffffffdf74

	(gdb) print $rbp-40
	$2 = (void *) 0x7fffffffdf58

	(gdb) x/16xw $rsp
	0x7fffffffdf50: 0x00000004      0x00000003      0x00000002      0x00000001
			``````````````````````````````````````````````````````````
	0x7fffffffdf60: 0xf7fe4260      0x00007fff      0x00000000      0x00000000
	0x7fffffffdf70: 0x555551a0      0x00005555      0x55555050      0x00005555
	0x7fffffffdf80: 0xffffdf90      0x00007fff      0x55555197      0x00005555

	//	    Low addresses --------------------------
				 |  Text (code) segment	    |
				  --------------------------
				 |  Data segment	    |
				  --------------------------
				 |  bss segment		    |
				  --------------------------
				 |  Heap segment	    |
				 |		       	    |
				 |	The heap grows ||   |
				 |	   down toward ||   |
				 |	 higher memory ||   |
				 |	    addressess ||   |
				 |		       \/   |
				 |  /\			    |
				 |  ||	The stack grows	    |
				 |  ||	up toward lower	    |
				 |  ||	memory addresses    |
				 |			    |
				 |  Stack segment	    |
		High addresses    --------------------------

